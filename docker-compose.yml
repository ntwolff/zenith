version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka_network

  # local -> 127.0.0.1:29092
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
        - kafka_network

  # local -> neo4j@neo4j://localhost:7687
  neo4j:
    image: neo4j:latest
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["graph-data-science"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
        - kafka_network

  fraud-detection-system:
    build: .
    depends_on:
      - kafka
      - neo4j
    networks:
        - kafka_network


  # http://localhost:8000/docs
  # http://localhost:8000/api/events/customer-registration
  fraud-detection-api:
    build: .
    command: uvicorn app.main:fastapi_app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - neo4j
    networks:
      - kafka_network

  fake-data-producer:
    build:
      context: .
      dockerfile: Dockerfile.fake-data-producer
    depends_on:
      - kafka
    restart: on-failure
    networks:
        - kafka_network

networks:
  kafka_network:
    name: kafka_docker_net
